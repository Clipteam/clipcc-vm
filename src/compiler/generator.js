const Motion = require('./blocks/motion.js');

const execute = require('./execute.js'); //@todo move it to engine/execute.js

class Generator {
    constructor (thread) {
        this.thread = thread;
        this.blocksCode = {};
        
        // 写入所有可编译的代码
        this.blocksCode = Object.assign(this.blocksCode, Motion.getCode());
    }
    
    generate () {
        console.log(this.thread);
        const target = this.thread.target;
        if (!target) throw new Error('target is undefined');

        const topBlock = this.thread.target.blocks.getBlock(this.thread.topBlock);
        const script = this.generateStack(this.thread.topBlock/*topBlock.next*/);
        
        //debug
        console.log(script);
        execute(script);
        
        return script;
    }
    
    generateStack (beginId) {
        let code = '//Generated by compiler\n';
        let currentId = beginId;
        const blocks = this.thread.target.blocks._blocks;
        
        while (currentId !== null) {
            const block = this.thread.target.blocks.getBlock(currentId);
            if (!block) throw new Error('block is undefined');
            let existFlag = false;
            for(const opcode in this.blocksCode) {
                if (opcode == block.opcode) {
                    let fragment = this.blocksCode[opcode] + '\n';
                    console.log(blocks);
                    for (const input in block.inputs) {
                        const value = blocks[block.inputs[input].block].fields.NUM.value;
                        fragment = fragment.replace("#[" + input + "]#", value);
                    }
                    code += fragment;
                    existFlag = true;
                    break;
                }
            }
            if (existFlag) currentId = block.next;
            else throw new Error('opcode is undefined');
        }
        return code;
    }
}

module.exports = Generator;