const Motion = require('./blocks/motion.js');
const Looks = require('./blocks/looks.js');
const Control = require('./blocks/control.js');

class Generator {
    constructor (thread) {
        this.thread = thread;
        this.blocksCode = {};
        
        // 写入所有可编译的代码
        this.blocksCode = Object.assign(this.blocksCode, Motion.getCode());
        this.blocksCode = Object.assign(this.blocksCode, Looks.getCode());
        this.blocksCode = Object.assign(this.blocksCode, Control.getCode());
    }
    
    generate () {
        console.log(this.thread);
        const target = this.thread.target;
        if (!target) throw new Error('target is undefined');

        let topBlockId= this.thread.topBlock;
        if (this.thread.blockContainer.runtime.getIsHat(this.thread.target.blocks.getBlock(topBlockId).opcode)) {
            // hat block should not be compiled
            topBlockId = this.thread.target.blocks.getBlock(topBlockId).next;
        }
        const script = this.generateStack(topBlockId/*topBlock.next*/);
        //debug
        console.log(script);
        
        return script;
    }
    
    generateStack (beginId) {
        let code = '//Generated by compiler\n';
        let currentId = beginId;
        const blocks = this.thread.target.blocks._blocks;
        
        while (currentId !== null) {
            const block = this.thread.target.blocks.getBlock(currentId);
            if (!block) throw new Error('block is undefined');
            let existFlag = false;
            for(const opcode in this.blocksCode) {
                if (opcode == block.opcode) {
                    let fragment = this.blocksCode[opcode] + '\n';
                    console.log(blocks);
                    fragment = this.deserializeInputs(fragment, blocks, block);
                    code += fragment;
                    existFlag = true;
                    break;
                }
            }
            if (existFlag) currentId = block.next;
            else throw new Error('opcode is undefined');
        }
        return code;
    }
    
    deserializeInputs (frag, blocks, block) {
        let fragment = frag;
        let value;
        for (const inputId in block.inputs) { // 逐个替换Inputs
            const input = block.inputs[inputId]; // 获取该input的值
            if (input.block == input.shadow) { //非嵌套reporter模块，开始获取值
                const targetBlock = blocks[input.block]; // 指向的模块
                switch (targetBlock.opcode) {
                    case 'text': {
                        value = targetBlock.fields.TEXT.value;
                        break;
                    }
                    case 'math_number': {
                        value = targetBlock.fields.NUM.value;
                        break;
                    }
                    case 'math_positive_number': {
                        value = targetBlock.fields.NUM.value;
                        break;
                    }
                    case 'math_whole_number': {
                        value = targetBlock.fields.NUM.value;
                        break;
                    }
                    case 'colour_picker': {
                        value = targetBlock.fields.COLOUR.value;
                        break;
                    }
                    case 'data_variable': {
                        value = targetBlock.fields.VARIABLE.value;
                        break;
                    }
                    case 'event_broadcast_menu': {
                        value = targetBlock.fields.BROADCAST.value;
                        break;
                    }
                    case 'data_listcontents': {
                        value = targetBlock.fields.LIST.value;
                        break;
                    }
                    case 'math_integer': {
                        value = targetBlock.fields.NUM.value;
                        break;
                    }
                    case 'math_angle': {
                        value = targetBlock.fields.NUM.value;
                        break;
                    }
                    default: {
                        console.error('Unknown field type:' + targetBlock.opcode);
                    }
                }
            } else {
                if (inputId == 'SUBSTACK' || inputId == 'SUBSTACK2') {
                    if (!input.block) value = '';
                    else value = this.generateStack(input.block);
                }
            }
            const reg = new RegExp('#<' + inputId + '>#', 'g');
            fragment = fragment.replace(reg, value);
        }
        return fragment;
    }
}

module.exports = Generator;