const Motion = require('./blocks/motion.js');

class Generator {
    constructor (thread) {
        this.thread = thread;
        this.blocksCode = {};
        
        // 写入所有可编译的代码
        this.blocksCode = Object.assign(this.blocksCode, Motion.getCode());
        console.log(this.blocksCode);
    }
    
    generate () {
        console.log(this.thread);
        this.blocks = this.thread.blockContainer._blocks;
        const topBlockId = this.thread.topBlock;
        
        // Generate blocks
        const generatedCode = this.generateBlock(this.blocks[topBlockId]);
        console.log(generatedCode);
        return generatedCode;
    }
    
    generateBlock (block) {
        let code = '//Generated by compiler\n';
        for(const opcode in this.blocksCode) {
            if (opcode == block.opcode) {
                code = this.replaceInput(this.blocksCode[opcode], block.inputs);
                // if (block.next != null && block.next != undefined) code += this.generateBlock(this.blocks[block.next]) + '\n';
                else return code;
            }
        }
        return "//Generate failed:" + block.opcode + '\n';
    }
    
    replaceInput (originalCode, inputs) {
        let code = originalCode;
        for (const input in inputs) {
            const value = this.blocks[inputs[input].block].fields.NUM.value;
            code = code.replace("#[" + input + "]#", value)
        }
        return code;
    }
}

module.exports = Generator;